<?php
/**
 * @file
 * Define permissions, Menus, Hooks for Boost cache clear.
 */

/**
 * Implements hook_menu().
 */
function boost_cache_clear_menu() {
  $items = array();
  $items['admin/config/system/boost-cache-clear'] = array(
    'title' => 'Boost cache clear',
    'description' => 'Clear Boost cache by passing their URL alias.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boost_cache_clear_settings_form'),
    'access arguments' => array('config_boost_cache_clear'),
    'file' => 'boost_cache_clear.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function boost_cache_clear_permission() {
  return array(
    'config_boost_cache_clear' => array(
      'title' => 'Configuration for Boost cache clear',
      'description' => t('Configuration page for Content type level boost cache management. Warning: Give to trusted roles only; this permission has security implications.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function boost_cache_clear_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'boost_cache_clear', 'boost_cache_clear.admin');
  if ($form_id == 'node_type_form') {
    $enable_bcc = '';
    // Create or Edit Content types.
    // Node edit forms.
    if (!empty($form['#node_type']->type)) {
      $data['content_type'] = $form['#node_type']->type;
      $enable_bcc = boost_cache_clear_query_handle('count', $data);
      $urls_clear = boost_cache_clear_query_handle('select', $data);
    }
    // The additional buttons and tab settings.
    $form['boost_cache_clear'] = array(
      '#type' => 'fieldset',
      '#title' => t('Boost Cache Clear settings'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 10,
    );
    // Enable Boost cache clear.
    $form['boost_cache_clear']['enable_bcc'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Boost Clear Cache'),
      '#description' => t('Enable Boost Clear Cache for this Content type and specify the pages.'),
      '#default_value' => $enable_bcc,
    );
    $clear_title = $form['#node_type']->name ? t('Clear Boost cache for specific pages while node is creat/edit in @type', array('@type' => $form['#node_type']->name)) : t('Clear Boost cache for specific pages while node is creat/edit in this content type.');
    // Specify the pages.
    $form['boost_cache_clear']['page_clear_bcc'] = array(
      '#type' => 'textarea',
      '#title' => $clear_title,
      '#description' => t('Specify pages by using their paths. Enter one path per line. The "*" character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog and blog?page=* for query strings. "/" is the front page. "*" is for clear entire boost cache.'),
      '#default_value' => isset($urls_clear) ? $urls_clear : '',
      '#wysiwyg' => FALSE,
      '#states' => array(
        'visible' => array(
          ':input[name="enable_bcc"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['#validate'][] = 'boost_cache_clear_confirm_validate';
    $form['#submit'][] = 'boost_cache_clear_confirm_submit';
  }
  elseif ($form_id == 'node_type_delete_confirm') {
    // Deleting the Content type.
    $form['#submit'][] = 'boost_cache_clear_confirm_delete';
  }
}

/**
 * Implements hook_node_insert().
 */
function boost_cache_clear_node_insert($node) {
  $content_type = $node->type;
  $nid = $node->nid;
  boost_cache_clear_urls_generate($content_type, $nid);
}

/**
 * Implements hook_node_update().
 */
function boost_cache_clear_node_update($node) {
  $content_type = $node->type;
  $nid = $node->nid;
  boost_cache_clear_urls_generate($content_type, $nid);
}

/**
 * Implements hook_node_delete().
 */
function boost_cache_clear_node_delete($node) {
  $content_type = $node->type;
  $nid = $node->nid;
  boost_cache_clear_urls_generate($content_type, $nid);
}

/**
 * Implements hook_comment_insert().
 */
function boost_cache_clear_comment_insert($comment) {
  $content_type = str_replace("comment_node_", "", $comment->node_type);
  $nid = $comment->nid;
  boost_cache_clear_urls_generate($content_type, $nid);
}

/**
 * Implements hook_comment_update().
 */
function boost_cache_clear_comment_update($comment) {
  $content_type = str_replace("comment_node_", "", $comment->node_type);
  $nid = $comment->nid;
  boost_cache_clear_urls_generate($content_type, $nid);
}

/**
 * Implements hook_comment_delete().
 */
function boost_cache_clear_comment_delete($comment) {
  $content_type = str_replace("comment_node_", "", $comment->node_type);
  $nid = $comment->nid;
  boost_cache_clear_urls_generate($content_type, $nid);
}

/**
 * Custom function to clear the cached pages.
 */
function boost_cache_clear_urls_generate($content_type, $nid) {
  module_load_include('inc', 'boost_cache_clear', 'boost_cache_clear.admin');
  $data['content_type'] = $content_type;
  $enable_bcc = boost_cache_clear_query_handle('count', $data);
  if ($enable_bcc) {
    $pages = boost_cache_clear_query_handle('select', $data);
    $urls = explode(PHP_EOL, $pages);
    $urls[] = drupal_get_path_alias('node/' . $nid);
    foreach ($urls as $value) {
      boost_cache_clear_by_url($value);
    }
  }
}

/**
 * Custom function to clear the cached pages.
 */
function boost_cache_clear_by_url($url) {
  global $base_root, $base_url;
  $end_char = explode("/", $url);
  $last_arg = end($end_char);
  if ($url == '*') {
    boost_flush_caches();
  }
  elseif ($last_arg == '*') {
    // Handle boost Directories, like search/*, blog/*,..
    $dir_path = $base_root . '/' . $url;
    $_boost = boost_transform_url($dir_path);
    if (file_exists($_boost['directory'])) {
      $count = _boost_rmdir($_boost['directory'], TRUE);
      watchdog('boost_cache_clear', '%count files removed from boost cache', array('%count' => $count), WATCHDOG_INFO, NULL);
    }
  }
  else {
    $boost = boost_transform_url(urldecode($base_url . '/' . $url));
    $file_url = isset($boost['filename']) ? $boost['filename'] . '.html' : NULL;
    if (strpos($last_arg, '?') !== FALSE) {
      // Handle Boost files with query string. ex: node/123, example,..
      $files = glob($file_url, GLOB_NOSORT);
      if ($files) {
        foreach ($files as $filename) {
          $filename_array[] = $filename;
        }
      }
    }
    else {
      // Handle Boost files. ex: node/123, example,..
      $filename_array[] = $file_url;
    }
    foreach ($filename_array as $file_path) {
      if (file_exists($file_path)) {
        if (unlink($file_path)) {
          boost_log('Removed !file from the boost cache.', array('!file' => $filename), WATCHDOG_DEBUG);
        }
      }
    }
  }
}
